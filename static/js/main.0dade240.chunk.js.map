{"version":3,"sources":["redux/reducers/form.ts","redux/reducers/index.ts","redux/constants/index.ts","redux/store/index.ts","redux/actions/form.ts","components/add-item/index.tsx","components/item/index.tsx","components/list-items/index.tsx","components/sort-items/index.tsx","components/search-item/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["INITIAL_STATE","list","flag","search","combineReducers","form","state","action","type","id","Date","now","text","payload","completed","filter","item","map","storeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","addItem","sortList","deleteItem","completeItem","searchItem","connect","actions","useState","setText","handleSubmit","className","onChange","e","target","value","onKeyDown","which","placeholder","onClick","Item","style","textDecoration","setState","useEffect","t","prevState","toLowerCase","includes","key","all","active","handleClick","updateState","Object","keys","forEach","disabled","htmlFor","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mlBAMMA,EAA+B,CACnCC,KAAM,GACNC,KAAM,MACNC,OAAQ,ICNKC,cAAgB,CAAEC,KDSb,WAAwD,IAAvDC,EAAsD,uDAA9CN,EAAeO,EAA+B,uCACzE,OAAQA,EAAOC,MACb,IEdoB,WFelB,OAAO,eACFF,EADL,CAEEL,KAAK,GAAD,mBACCK,EAAML,MADP,CAEF,CACEQ,GAAIC,KAAKC,MACTC,KAAML,EAAOM,QAAQD,KACrBE,WAAW,OAInB,IEzBqB,YF0BnB,OAAO,eACFR,EADL,CAEEJ,KAAMK,EAAOM,QAAQE,SAEzB,IE7BuB,cF8BrB,OAAO,eACFT,EADL,CAEEL,KAAMK,EAAML,KAAKc,QAAO,SAACC,GAAD,OAAUA,EAAKP,KAAOF,EAAOM,QAAQJ,QAEjE,IEjCyB,gBFkCvB,OAAO,eACFH,EADL,CAEEL,KAAMK,EAAML,KAAKgB,KAAI,SAACD,GACpB,OAAIA,EAAKP,KAAOF,EAAOM,QAAQJ,IAE7BO,EAAKF,WAAaE,EAAKF,UAChBE,GAEFA,OAGb,IE5CuB,cF6CrB,OAAO,eACFV,EADL,CAEEH,OAAQI,EAAOM,QAAQD,OAE3B,QACE,OAAON,MGhDPY,EAAkBC,QAAWA,OAAeC,sCAAyCC,IAO5EC,EALDC,YACZC,EACAN,EAAeO,YAAgBC,O,OCNpBC,EAAU,SAACf,GAAD,MAAmB,CACxCJ,KFLsB,WEMtBK,QAAS,CAAED,UAGAgB,EAAW,SAACb,GAAD,MAAqB,CAC3CP,KFTuB,YEUvBK,QAAS,CAAEE,YAGAc,EAAa,SAACpB,GAAD,MAAiB,CACzCD,KFbyB,cEczBK,QAAS,CAAEJ,QAGAqB,EAAe,SAACrB,GAAD,MAAiB,CAC3CD,KFjB2B,gBEkB3BK,QAAS,CAAEJ,QAGAsB,EAAa,SAACnB,GAAD,MAAmB,CAC3CJ,KFrByB,cEsBzBK,QAAS,CAAED,UCgBEoB,G,MAAAA,YAAQ,KAAMC,EAAdD,EAjCC,SAAC,GAAyB,IAAvBL,EAAsB,EAAtBA,QAAsB,EACfO,mBAAS,IADM,mBAChCtB,EADgC,KAC1BuB,EAD0B,KAMjCC,EAAe,WACfxB,IACFe,EAAQf,GACRuB,EAAQ,MASZ,OACI,yBAAKE,UAAU,WACb,2BAAO7B,KAAK,OACL8B,SAnBQ,SAACC,GACpBJ,EAAQI,EAAEC,OAAOC,QAmBNC,UATS,SAACH,GACL,KAAZA,EAAEI,OACJP,KAQSK,MAAO7B,EACPgC,YAAY,iBAEnB,4BAAQpC,KAAK,SACNqC,QAAST,GADhB,YChBOU,EAXF,SAAC,GAAsB,IAApB9B,EAAmB,EAAnBA,KACNJ,EAAoBI,EAApBJ,KAAME,EAAcE,EAAdF,UACd,OACE,0BAAMiC,MAAO,CACXC,eAAgBlC,EAAY,eAAiB,SAE5CF,ICwCQoB,G,MAAAA,aALS,SAAC1B,GAAmB,IAAD,EACVA,EAAMD,KACrC,MAAO,CAAEJ,KAFgC,EACjCA,KACOC,KAF0B,EAC3BA,KACOC,OAFoB,EACrBA,UAIkB8B,EAAzBD,EAtCG,SAAC,GAEJ,IADb/B,EACY,EADZA,KAAMC,EACM,EADNA,KAAMC,EACA,EADAA,OAAQ0B,EACR,EADQA,WAAYC,EACpB,EADoBA,aACpB,EACcI,mBAASjC,GADvB,mBACLK,EADK,KACE2C,EADF,KAcZ,OAZAC,qBAAU,WACK,QAAThD,EACF+C,EAAShD,GACS,WAATC,EACT+C,EAAShD,EAAKc,QAAO,SAACoC,GAAD,OAAQA,EAAErC,cACb,cAATZ,GACT+C,EAAShD,EAAKc,QAAO,SAACoC,GAAD,OAAOA,EAAErC,cAEjB,KAAXX,GACF8C,GAAS,SAACG,GAAD,OAAeA,EAAUrC,QAAO,SAACC,GAAD,OAAUA,EAAKJ,KAAKyC,cAAcC,SAASnD,WAErF,CAACD,EAAMD,EAAME,IAEd,yBAAKkC,UAAU,QACZ/B,EAAMW,KAAI,SAACD,GAAD,OACP,yBAAKuC,IAAKvC,EAAKP,GAAI4B,UAAU,aAC3B,4BAAQA,UAAS,8BAA0BrB,EAAKF,UAAY,WAAa,YACjE+B,QAAS,kBAAMf,EAAad,EAAKP,MACtCO,EAAKF,UAAY,YAAc,UAElC,kBAAC,EAAD,CAAME,KAAMA,IACZ,4BAAQqB,UAAU,mBACVQ,QAAS,kBAAMhB,EAAWb,EAAKP,MADvC,mBCJGuB,G,MAAAA,YAAQ,KAAMC,EAAdD,EA5BG,SAAC,GAA0B,IAAxBJ,EAAuB,EAAvBA,SAAuB,EAChBM,mBAAS,CACjCsB,KAAK,EACLC,QAAQ,EACR3C,WAAW,IAJ6B,mBACnCR,EADmC,KAC5B2C,EAD4B,KAOpCS,EAAc,SAAC3C,GACnBa,EAASb,GACT,IAAM4C,EAAcrD,EACpBsD,OAAOC,KAAKF,GAAaG,SAAQ,SAAC9C,GAChC2C,EAAY3C,GAAQA,IAASD,KAE/BkC,GAAS,SAACG,GAAD,sBACJA,EADI,CAEPO,oBAIJ,OACE,yBAAKtB,UAAU,aACb,4BAAQ0B,SAAUzD,EAAMkD,IAAKX,QAAS,kBAAMa,EAAY,SAAxD,OACA,4BAAQK,SAAUzD,EAAMmD,OAAQZ,QAAS,kBAAMa,EAAY,YAA3D,UACA,4BAAQK,SAAUzD,EAAMQ,UAAW+B,QAAS,kBAAMa,EAAY,eAA9D,kBCXS1B,G,MAAAA,YAAQ,KAAMC,EAAdD,EAZI,SAAC,GAAD,IAAGD,EAAH,EAAGA,WAAH,OACjB,yBAAKM,UAAU,cACb,2BAAO2B,QAAQ,UAAf,kBACA,2BAAOxD,KAAK,OACL8B,SAAU,SAACC,GAAD,OAAsCR,EAAWQ,EAAEC,OAAOC,QACpEJ,UAAU,SACVO,YAAY,cACZnC,GAAG,gBCKCwD,EAZO,kBACd,kBAAC,IAAD,CAAU3C,MAAOA,GACb,yBAAKe,UAAU,aACb,yCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJM6B,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0dade240.chunk.js","sourcesContent":["import {\n  ADD_ITEM, COMPLETE_ITEM, DELETE_ITEM, SEARCH_ITEM, SORT_LIST,\n} from '../constants';\n// eslint-disable-next-line no-unused-vars\nimport { IInitialState } from '../../types/state.dt';\n\nconst INITIAL_STATE: IInitialState = {\n  list: [],\n  flag: 'all',\n  search: '',\n};\n\nexport const form = (state = INITIAL_STATE, action: any): IInitialState => {\n  switch (action.type) {\n    case ADD_ITEM:\n      return {\n        ...state,\n        list: [\n          ...state.list,\n          {\n            id: Date.now(),\n            text: action.payload.text,\n            completed: false,\n          },\n        ],\n      };\n    case SORT_LIST:\n      return {\n        ...state,\n        flag: action.payload.filter,\n      };\n    case DELETE_ITEM:\n      return {\n        ...state,\n        list: state.list.filter((item) => item.id !== action.payload.id),\n      };\n    case COMPLETE_ITEM:\n      return {\n        ...state,\n        list: state.list.map((item) => {\n          if (item.id === action.payload.id) {\n            // eslint-disable-next-line no-param-reassign\n            item.completed = !item.completed;\n            return item;\n          }\n          return item;\n        }),\n      };\n    case SEARCH_ITEM:\n      return {\n        ...state,\n        search: action.payload.text,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { form } from './form';\n\nexport default combineReducers({ form });\n","export const ADD_ITEM = 'ADD_ITEM';\nexport const SORT_LIST = 'SORT_LIST';\nexport const DELETE_ITEM = 'DELETE_ITEM';\nexport const COMPLETE_ITEM = 'COMPLETE_ITEM';\nexport const SEARCH_ITEM = 'SEARCH_ITEM';\n","import { createStore, applyMiddleware, compose } from 'redux';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\n// eslint-disable-next-line no-undef,no-underscore-dangle\nconst storeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nconst store = createStore(\n  rootReducer,\n  storeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import {\n  ADD_ITEM, COMPLETE_ITEM, DELETE_ITEM, SEARCH_ITEM, SORT_LIST,\n} from '../constants';\n\nexport const addItem = (text: string) => ({\n  type: ADD_ITEM,\n  payload: { text },\n});\n\nexport const sortList = (filter: string) => ({\n  type: SORT_LIST,\n  payload: { filter },\n});\n\nexport const deleteItem = (id: number) => ({\n  type: DELETE_ITEM,\n  payload: { id },\n});\n\nexport const completeItem = (id: number) => ({\n  type: COMPLETE_ITEM,\n  payload: { id },\n});\n\nexport const searchItem = (text: string) => ({\n  type: SEARCH_ITEM,\n  payload: { text },\n});\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport './styles.scss';\n\ninterface IProps {\n  addItem: (text: string) => void;\n}\n\nconst AddItem = ({ addItem }: IProps) => {\n  const [text, setText] = useState('');\n  const handleChange = (e: { target: HTMLInputElement; }) => {\n    setText(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    if (text) {\n      addItem(text);\n      setText('');\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.which === 13) {\n      handleSubmit();\n    }\n  };\n  return (\n      <div className=\"additem\">\n        <input type=\"text\"\n               onChange={handleChange}\n               onKeyDown={handleKeyDown}\n               value={text}\n               placeholder=\"add new item\"\n        />\n        <button type=\"submit\"\n               onClick={handleSubmit}\n        > + </button>\n      </div>\n  );\n};\n\nexport default connect(null, actions)(AddItem);\n","import React from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { IItem } from '../../types/state.dt';\n\ninterface IProps {\n  item: IItem\n}\n\nconst Item = ({ item }: IProps) => {\n  const { text, completed } = item;\n  return (\n    <span style={{\n      textDecoration: completed ? 'line-through' : 'none',\n    }}>\n      {text}\n    </span>\n  );\n};\n\nexport default Item;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n// eslint-disable-next-line no-unused-vars\nimport { IItem, IState } from '../../types/state.dt';\nimport * as actions from '../../redux/actions';\nimport Item from '../item';\nimport './styles.scss';\n\ninterface IProps {\n  list: IItem[],\n  flag: string,\n  search: string,\n  deleteItem: (id: number) => void,\n  completeItem: (id: number) => void,\n}\n\nconst ListItems = ({\n  list, flag, search, deleteItem, completeItem,\n}: IProps) => {\n  const [state, setState] = useState(list);\n  useEffect(() => {\n    if (flag === 'all') {\n      setState(list);\n    } else if (flag === 'active') {\n      setState(list.filter((t) => !t.completed));\n    } else if (flag === 'completed') {\n      setState(list.filter((t) => t.completed));\n    }\n    if (search !== '') {\n      setState((prevState) => prevState.filter((item) => item.text.toLowerCase().includes(search)));\n    }\n  }, [flag, list, search]);\n  return (\n    <div className=\"list\">\n      {state.map((item: IItem) => (\n          <div key={item.id} className=\"list-item\">\n            <button className={ `list-item-completed ${item.completed ? 'variant1' : 'variant2'}`}\n                    onClick={() => completeItem(item.id)}>\n              {item.completed ? 'completed' : 'active'}\n            </button>\n            <Item item={item}/>\n            <button className=\"list-item-delete\"\n                    onClick={() => deleteItem(item.id)}>delete</button>\n          </div>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  const { list, flag, search } = state.form;\n  return { list, flag, search };\n};\n\nexport default connect(mapStateToProps, actions)(ListItems);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport './styles.scss';\n\ninterface IProps {\n  sortList: (filter: string) => void;\n}\n\nconst SortItems = ({ sortList }: IProps) => {\n  const [state, setState] = useState({\n    all: true,\n    active: false,\n    completed: false,\n  });\n\n  const handleClick = (filter: string) => {\n    sortList(filter);\n    const updateState = state;\n    Object.keys(updateState).forEach((item) => {\n      updateState[item] = item === filter;\n    });\n    setState((prevState) => ({\n      ...prevState,\n      updateState,\n    }));\n  };\n\n  return (\n    <div className=\"sortitems\">\n      <button disabled={state.all} onClick={() => handleClick('all')}>all</button>\n      <button disabled={state.active} onClick={() => handleClick('active')}>active</button>\n      <button disabled={state.completed} onClick={() => handleClick('completed')}>completed</button>\n    </div>\n  );\n};\n\nexport default connect(null, actions)(SortItems);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport './styles.scss';\n\ninterface IProps {\n  searchItem: (text: string) => void;\n}\n\nconst SearchItem = ({ searchItem }: IProps) => (\n  <div className=\"searchitem\">\n    <label htmlFor=\"search\">Find your item</label>\n    <input type=\"text\"\n           onChange={(e: { target: HTMLInputElement; }) => searchItem(e.target.value)}\n           className=\"search\"\n           placeholder=\"search item\"\n           id=\"search\"\n    />\n  </div>\n);\n\nexport default connect(null, actions)(SearchItem);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport store from './redux/store';\nimport AddItem from './components/add-item';\nimport ListItems from './components/list-items';\nimport SortItems from './components/sort-items';\nimport SearchItem from './components/search-item';\n\nconst App: React.FC = () => (\n        <Provider store={store}>\n            <div className=\"container\">\n              <h1>Todo-list</h1>\n              <AddItem/>\n              <SortItems/>\n              <ListItems/>\n              <SearchItem/>\n            </div>\n        </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  // eslint-disable-next-line no-undef\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}